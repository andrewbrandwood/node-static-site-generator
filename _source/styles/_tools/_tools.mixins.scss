//Common Sass mixins

/* Mixin to drop micro clearfix into a selector.
*
* .simple-usage {
*   @include clearfix();
* }
*
* .detailed-usage {
*   @include clearfix(important);
* }
*/

@mixin clearfix($important: false) {

    // Determine whether or not to make declarations important.
    @if ($important == false) {
        $important: null;
    } @else {
        $important: !important;
    }

    &:after {
        content: "" $important;
        display: table $important;
        clear: both $important;
    }

}


// Custom Breakpoints
@mixin respond-to-max($width) {
    @if $fix-mqs {
        @if $fix-mqs <= $width {
            @content;
        }
    } @else {
        @media screen and (max-width: $width) {
            @content;
        }
    }
}

@mixin respond-to-min($width) {
    @if $fix-mqs {
        @if $fix-mqs >= $width {
            @content;
        }
    } @else {
        @media screen and (min-width: $width) {
            @content;
        }
    }
}

@mixin respond-min-max($width--min, $width--max) {
    @if $fix-mqs {
        @if $fix-mqs >= $width--min and $fix-mqs <= $width--max {
            @content;
        }
    } @else {
        @media screen and (min-width: $width--min) and (max-width: $width--max) {
            @content;
        }
    }
}

$old-ie-7: false !default;
$old-ie-8: false !default;

@mixin old-ie-7 {
    // Only use this content if we're dealing with old IE
    @if $old-ie-7 {
        @content;
    }
}
@mixin old-ie-8 {
    // Only use this content if we're dealing with old IE
    @if $old-ie-8 {
        @content;
    }
}

@mixin old-ie8-scaled-svg($d-px-target) {
    @if $old-ie-8 {
        font-size: 1rem;
        zoom: ($d-px-target/$d-px);
    }
}

// Generate a font-size and baseline-compatible line-height.

@mixin font-size($font-size, $line-height: auto) {
    font-size: $font-size;
    font-size: ($font-size / $base-font-size) * 1rem;

    @if $line-height == auto {
        line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }

    @else {

        @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
            line-height: $line-height;
        }

        @elseif ($line-height != none and $line-height != false) {
            @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`."
        }

    }

}

// fonts
@mixin font($name, $file, $weight: normal) {

    @font-face {
        font-family: $name;
        src: url($fontUrl + $file + '.eot');
        src: url($fontUrl + $file + '.eot?#iefix') format('embedded-opentype'),
            url($fontUrl + $file + '.woff') format('woff'),
            url($fontUrl + $file + '.ttf') format('truetype'),
            url($fontUrl + $file + '#' + $name) format('svg');
        font-weight: $weight;
        font-style: normal;
    }
}


// transition

@mixin transition {
    -webkit-transition:all 0.3s ease;
    -moz-transition:all 0.3s ease;
    -o-transition:all 0.3s ease;
    -ms-transition:all 0.3s ease;
    transition:all 0.3s ease;
    -webkit-transform: translate3d(0, 0, 0);
    -webkit-backface-visibility: hidden;
    -webkit-perspective: 1000;
    -webkit-transform-style: preserve-3d;
}

@mixin placeholder {
    
    ::-webkit-input-placeholder {
        @content;
    }
  :-moz-placeholder           {@content;}
  ::-moz-placeholder          {@content;}
  :-ms-input-placeholder      {@content;}  
}